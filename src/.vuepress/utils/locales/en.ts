export default {
  common: {
    title: "Home",
    batchDel: "Batch Delete",
    submit: "Submit",
    reset: "Reset",
    search: "Search",
    add: "Add",
    edit: "Edit",
    query: "Query",
    back: "Back",
    yes: "Yes",
    no: "No",
    confirm: "Confirm",
    cancel: "Cancel",
    details: "Details",
    formatCode: "Format Code",
  },
  page: {
    test: "Test",
    fetchData: "Fetch Data",
    setNoData: "Set No Data",
    getAsyncData: "Get Async Data",
    namePassword: "Username Password",
    ageGender: "Age Gender",
    toggle: "Toggle",
    username: "Username",
    password: "Password",
    age: "Age",
    gender: "Gender",
    male: "Male",
    female: "Female",
    syncSelect: "Async Select",
  },
  word: {
    speakingOfRadio: `Speaking of radio buttons in forms, there are typically two common business requirements.
In general, binding complex JavaScript code within HTML violates the principle of separation of behavior and structure, mainly because it's hard to maintain next time.`,
    radio1: `In general, radio buttons can be categorized into two types:`,
    insert: `Insertion `,
    insert1: `Use the FormList's append slot for this.`,
    toggle: `Toggling`,
    toggle1: `You can either directly manipulate the fieldList array (testing your knowledge of arrays) to achieve toggling,
    or you can prepare two sets of field item arrays (less error-prone).
`,
    example1: "let's see a direct toggling example:",
    example2: `Perhaps this scenario is all too familiar in a backend management system; prolonged "copy and paste" work makes the code cumbersome. It's a tearjerker, to say the least. Let's illustrate with an example:`,
    example3: `Combining adding and editing, distinguishing based on whether the 'id' data is passed or not:`,
    fileDesc1: `is the file for adding and editing, coupled together.`,
    fileDesc2: ` simulates API data.`,
    fileDesc3: ` is the page for displaying details.`,
    fileDesc4: `  is the button display page.`,
    fileDesc5: `  is the file for shared components' data and functions`,
    fileDesc6: `Learn about mixins`,
  },
  codemaker: {
    tableGen: "Table Generation",
    formGen: "Form Generation",
    lang: "Multi-language",
    lang1: "Multi-language",
    required: "Required",
    gen: "Generate",
    preview: "Preview",
    code: "Code",
    formText: "Generate Form Items",
    searchFormText: "Query Form Items",
    tableText: "Table Columns",
    formPlaceholder:
      "Please enter form text, separated by commas in English (or Chinese), e.g., Name, Gender, Age, Phone Number",
    tablePlaceholder:
      "Please enter table columns, separated by commas in English (or Chinese), e.g., Creation Time, Update Time, Operator, Operation Record",
    formExampleText: "Name, Gender, Age, Phone Number",
    tableExampleText: "Name, Type, Status, Action",
  },
};
