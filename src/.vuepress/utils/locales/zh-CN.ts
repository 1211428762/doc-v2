export default {
  common: {
    title: "首页",
    batchDel: "批量删除",
    submit: "提交",
    reset: "重置",
    search: "搜索",
    add: "新增",
    edit: "编辑",
    query: "查询",
    back: "返回",
    yes: "是",
    no: "否",
    confirm: "确认",
    cancel: "取消",
    details: "详情",
    formatCode: "格式化代码",
  },
  page: {
    test: "测试",
    fetchData: "获取数据",
    setNoData: "设置无数据",
    getAsyncData: "获取异步数据",
    namePassword: "用户名密码",
    ageGender: "年龄性别",
    toggle: "切换",
    username: "用户名",
    password: "密码",
    age: "年龄",
    gender: "性别",
    male: "男",
    female: "女",
    syncSelect: "异步选择",
  },
  word: {
    speakingOfRadio: `说到表单里的radio ,常见的业务需求估计有以下两种,
一般来说需要在html 绑定冗杂的js代码 ,违背了行为结构分离原则, 主要是下次维护 要看到吐`,
    radio1: `一般来说radio 分为:`,
    insert: `插入`,
    insert1: `  使用formList append插槽即可`,
    toggle: `切换`,
    toggle1: `　可以选择直接操作fieldList数组(考验数组知识),来实现切换.也可以实现就准备两套表单项数组(不易出错)`,
    example1: "闲话少说, 直接切换案例:",
    example2: `　　可能这种场景在后台管理系统,再熟悉不过了, 长期的"cv",让代码沉重不堪, 说起来都是一把泪, 上栗子`,
    example3: `　　将新增，和修改耦合到一起，通过判断是否传入数据ｉｄ来区分`,
    fileDesc1: `为新增修改耦合文件`,
    fileDesc2: `模拟接口数据`,
    fileDesc3: ` 为详情展示页`,
    fileDesc4: ` 为按钮展示页`,
    fileDesc5: ` 为组件公用数据,函数文件,`,
    fileDesc6: `了解mixin`,
  },
  codemaker: {
    tableGen: "表格生成",
    formGen: "表单生成",
    lang: "多语言(需添加翻译接口)",
    lang1: "多语言",
    required: "必填",
    gen: "生成",
    preview: "预览",
    code: "代码",
    formText: "生成表单项",
    searchFormText: "查询表单项",
    tableText: "表格列",
    formPlaceholder:
      "请输入表单文案，用英文（中文也可以）逗号分隔，如：姓名，性别，年龄，手机号码",
    tablePlaceholder:
      "请输入表单列，用英文（中文也可以）逗号分隔，如：创建时间，更新时间，操作人，操作记录",
    formExampleText: "姓名，性别，年龄，手机号码",
    tableExampleText: "名称, 类型, 状态, 操作",
  },
};
